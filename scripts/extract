#!/usr/bin/env python3

from functools import partial
import pymatgen as mg
import json

import os
import sys

def main(argv):
	from argparse import ArgumentParser

	parser = ArgumentParser(argv[0])
	parser.add_argument('study_dir', type=str)
	parser.add_argument('columns', type=str, nargs='+', choices=sorted(EXTRACT_FUNCS))

	args = parser.parse_args(argv[1:])

	for trialdir in get_trial_dirs(args.study_dir):
		# note: will contain data of heterogenous types
		trial_data = extract(trialdir, args.columns)
		print(*[str(x) for x in trial_data])

#-----------------------------------------------------

def get_metadata_dict(trialdir):
	metadata_path = os.path.join(trialdir, 'metadata')
	with open(metadata_path) as f:
		s = f.read()
	return json.loads(s)

def get_oszicar_object(trialdir):
	oszicar_path = os.path.join(trialdir, 'OSZICAR')
	return mg.io.vaspio.Oszicar(oszicar_path)

#-----------------------------------------------------

def extract_kpointdiv(trialdir, idx):
	meta = get_metadata_dict(trialdir)
	return meta['kpointdivs'][idx]

def extract_final_energy(trialdir):
	oszicar = get_oszicar_object(trialdir)
	return float(oszicar.final_energy) # convert to remove unit

def extract_scale(trialdir):
	meta = get_metadata_dict(trialdir)
	return meta['atomic_sep']

EXTRACT_FUNCS = {
	'name': lambda trialdir: os.path.split(trialdir)[1],
	'ka': partial(extract_kpointdiv, idx=0),
	'kb': partial(extract_kpointdiv, idx=1),
	'kc': partial(extract_kpointdiv, idx=2),
	'scale': extract_scale,
	'e0': extract_final_energy,
}

#-----------------------------------------------------

def extract(trialdir, names):
	result = []
	for name in names:
		if name in EXTRACT_FUNCS:
			func = EXTRACT_FUNCS[name]
			result.append(func(trialdir))
		else:
			raise ValueError('"{}" is not an available property'.format(name))
	return result

def get_trial_dirs(d):
	listpath = os.path.join(d, 'trial_dirs')
	with open(listpath) as f:
		result = [s.strip() for s in f.readlines()]
	return result

if __name__ == '__main__':
	main(sys.argv)

